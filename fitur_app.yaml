# =====================================================================
#            DETAIL FITUR DAN ALUR PROSES APLIKASI SCANNER
# =====================================================================
# Dokumen ini menjelaskan alur kerja setiap fitur utama, dari interaksi
# pengguna hingga data yang dihasilkan dan tampilan di aplikasi.
# ---------------------------------------------------------------------

fitur_utama:
  - fitur: "1. Price Scanning & Comparison"
    deskripsi: "Fitur inti untuk membandingkan harga token antara CEX dan DEX secara real-time, menghitung potensi profit, dan memberikan sinyal."
    alur_proses:
      - langkah: "Input Pengguna"
        detail: "Pengguna menekan tombol 'Start Scan' di komponen `filter-toolbar.js`."
        sumber_data: "Interaksi UI (klik tombol)."
      - langkah: "Inisiasi Scan"
        detail: "Komponen `scanning-tab.js` memanggil method `startScanning()` dari `scanner.js` (mixin). State `isScanning` diubah menjadi `true` dan filter dikunci."
        sumber_data: "State lokal komponen."
      - langkah: "Orkestrasi oleh PriceScanner"
        detail: "Mixin `scanner.js` menginisialisasi dan memanggil `startScan()` pada service `price-scanner.js`. Service ini menjadi otak dari keseluruhan proses."
        sumber_data: "Daftar token yang sudah difilter (`filteredTokens`) dan konfigurasi filter (`filters`) dari `app.js`."
      - langkah: "Fetch Data Real-time"
        detail: "`price-scanner.js` memanggil `realtime-data-fetcher.js` untuk mendapatkan data harga gas (Gwei) dan kurs USDT/IDR. Ini dilakukan sekali di awal untuk efisiensi."
        sumber_data: "API Eksternal (RPC Provider untuk gas, API CEX untuk kurs)."
      - langkah: "Fetch Harga CEX (per token)"
        detail: "Dalam sebuah loop, `price-scanner.js` memanggil `cex-price-fetcher.js` untuk mengambil data order book (harga jual & beli) dari CEX yang relevan untuk setiap token."
        sumber_data: "API CEX (misal: Binance, Gate.io)."
      - langkah: "Update UI (Harga CEX)"
        detail: "Segera setelah data CEX didapat, `price-scanner.js` memanggil callback `onCexResult`. Callback ini ditangkap oleh `scanner.js` (mixin) yang memperbarui state `scanResults`. Komponen `token-row.js` secara reaktif menampilkan harga CEX di tabel. Ini terjadi sangat cepat, bahkan sebelum harga DEX muncul."
        sumber_data: "Data CEX yang baru diterima."
      - langkah: "Fetch Harga DEX (Paralel)"
        detail: "`price-scanner.js` memanggil `quote-dex.js` untuk mendapatkan *quote* (harga) dari semua DEX yang aktif secara paralel untuk satu token. Ini menggunakan `Promise.allSettled` agar kegagalan satu DEX tidak menghentikan yang lain."
        sumber_data: "API Aggregator DEX (misal: Odos, 1inch, Kyber)."
      - langkah: "Kalkulasi PNL & Update UI (per DEX)"
        detail: "Setiap kali satu *quote* dari DEX berhasil didapat, `price-scanner.js` **tidak menunggu DEX lain**. Ia langsung memanggil `pnl-calculator.js` untuk menghitung PNL. Hasilnya dikirim via callback `onPnlResult` ke `scanner.js` (mixin), yang memperbarui state `scanResults` untuk sel DEX spesifik tersebut. `token-row.js` langsung bereaksi dan mengupdate sel yang relevan."
        sumber_data: "Data CEX dari langkah sebelumnya dan data quote DEX yang baru diterima."
      - langkah: "Pengiriman Sinyal"
        detail: "Jika hasil kalkulasi PNL melebihi ambang batas (`minPnl`), `price-scanner.js` memanggil `telegram-service.js` untuk mengirim notifikasi sinyal ke Telegram."
        sumber_data: "Hasil kalkulasi PNL."
    perhitungan:
      - nama: "Kalkulasi PNL (Profit and Loss)"
        lokasi: "`pnl-calculator.js`"
        rumus: "PNL = (Hasil Penjualan di Tujuan) - (Modal Awal) - (Total Biaya). Total Biaya mencakup: Biaya trading CEX (beli), Biaya withdrawal CEX, Biaya gas swap di DEX, dan Biaya trading CEX (jual)."
      - nama: "Batching & Delay"
        lokasi: "`price-scanner.js` dan `delay-manager.js`"
        rumus: "Token dibagi menjadi beberapa grup (batch). Ada jeda waktu yang terstruktur antar grup, antar token dalam satu grup, dan antar panggilan API ke CEX/DEX untuk menghindari *rate limit*."
    output_dan_data:
      - jenis: "Tampilan UI"
        detail: "Tabel di `scanning-tab.js` terisi secara dinamis. Kartu sinyal profit muncul di bagian atas. Progress bar di `filter-toolbar.js` bergerak."
      - jenis: "Notifikasi Eksternal"
        detail: "Pesan terformat dikirim ke channel Telegram melalui `telegram-service.js`."
      - jenis: "Data In-Memory"
        detail: "Hasil scan (harga CEX, quote DEX, PNL) disimpan sementara di state `scanResults` dalam `scanner.js` (mixin). Data ini hilang saat halaman di-reload."
    tampilan_di_aplikasi:
      - komponen: "`scanning-tab.js`"
        deskripsi: "Komponen utama yang menampung seluruh antarmuka tab Scan, termasuk tabel hasil dan kartu sinyal."
      - komponen: "`token-row.js`"
        deskripsi: "Merepresentasikan satu baris token di dalam tabel. Bertanggung jawab menampilkan detail token, harga CEX, dan hasil PNL dari semua DEX."
      - komponen: "`filter-settings.js`"
        deskripsi: "Sidebar di sebelah kiri untuk memilih CEX, DEX, dan Pair yang akan di-scan."
      - komponen: "`filter-toolbar.js`"
        deskripsi: "Toolbar di atas tabel yang berisi tombol Start/Stop, input Min PNL, dan progress bar."

  - fitur: "2. Token Management (CRUD)"
    deskripsi: "Fitur untuk menambah, melihat, mengubah, dan menghapus (CRUD) daftar token yang akan di-scan."
    alur_proses:
      - langkah: "Input Pengguna (Create/Edit)"
        detail: "Pengguna menekan tombol 'Add Token' atau ikon 'Edit' di `management-tab.js`. Sebuah modal form akan muncul."
        sumber_data: "Interaksi UI."
      - langkah: "Pengisian Form"
        detail: "Pengguna mengisi detail token seperti nama, smart contract, CEX, ticker, dan konfigurasi modal per DEX."
        sumber_data: "Input dari pengguna."
      - langkah: "Penyimpanan Data"
        detail: "Saat menekan 'Simpan', method `saveNewToken()` atau `saveEditToken()` di `management-tab.js` dipanggil. Method ini memvalidasi data dan memanggil `coinRepo.save(record)`."
        sumber_data: "Data dari form modal."
      - langkah: "Interaksi Repository"
        detail: "`coin.repository.js` menerima data dan memanggil `DB.saveData()` untuk menulis atau memperbarui record di IndexedDB."
        sumber_data: "Objek data token yang sudah diformat."
      - langkah: "Logging Aksi"
        detail: "Setelah penyimpanan berhasil, `history-logger.js` (mixin) dipanggil untuk mencatat aksi (ADD_COIN atau EDIT_COIN) ke dalam tabel `RIWAYAT_AKSI`."
        sumber_data: "Informasi aksi yang baru saja dilakukan."
      - langkah: "Refresh Tampilan"
        detail: "`management-tab.js` memanggil `loadTokensFromDB()` untuk memuat ulang daftar token dari IndexedDB dan memperbarui tabel."
        sumber_data: "Data terbaru dari IndexedDB."
    perhitungan:
      - nama: "Tidak ada"
        lokasi: "-"
        rumus: "Fitur ini murni operasi CRUD (Create, Read, Update, Delete) data tanpa perhitungan matematis yang kompleks."
    output_dan_data:
      - jenis: "Data Persisten (IndexedDB)"
        detail: "Sebuah record baru dibuat atau record yang ada diperbarui di dalam object store `KOIN_{CHAIN}` (misal: `KOIN_BSC`)."
      - jenis: "Data Log (IndexedDB)"
        detail: "Sebuah record baru ditambahkan ke object store `RIWAYAT_AKSI`."
      - jenis: "Tampilan UI"
        detail: "Modal form ditutup. Tabel di `management-tab.js` diperbarui untuk menampilkan token baru atau yang telah diubah. Sebuah notifikasi toast muncul."
    tampilan_di_aplikasi:
      - komponen: "`management-tab.js`"
        deskripsi: "Komponen utama yang menampilkan tabel daftar token yang dikelola, tombol-tombol aksi (Add, Import, Export), dan modal form untuk operasi CRUD."

  - fitur: "3. CEX Sync"
    deskripsi: "Mengambil daftar token dari API CEX, membandingkannya dengan token yang sudah ada, dan mengimpornya ke manajemen."
    alur_proses:
      - langkah: "Input Pengguna"
        detail: "Pengguna memilih CEX dari dropdown dan menekan tombol 'Sync CEX' di `sync-tab.js`."
        sumber_data: "Interaksi UI."
      - langkah: "Fetch Data dari API CEX"
        detail: "Method `fetchAndMergeCex()` di `sync-tab.js` menggunakan service `CheckWalletExchanger` untuk mengambil daftar koin mentah dari API CEX yang dipilih."
        sumber_data: "API CEX."
      - langkah: "Transformasi & Pengayaan Data"
        detail: "Untuk setiap koin yang didapat: data dinormalisasi, desimal diambil dari blockchain via `web3-service.js` jika perlu, dan dibandingkan dengan data di `KOIN_{CHAIN}` untuk menandai token sebagai 'baru' (`isNew: true`)."
        sumber_data: "Data mentah dari API, data dari `KOIN_{CHAIN}` (IndexedDB), dan data dari RPC Provider (via Web3)."
      - langkah: "Penyimpanan ke Cache"
        detail: "Data yang sudah diperkaya disimpan ke dalam object store `SYNC_KOIN_{CHAIN}` oleh `sync.repository.js`. Ini berfungsi sebagai cache."
        sumber_data: "Data yang sudah diproses."
      - langkah: "Tampilan Hasil Sync"
        detail: "Komponen `sync-tab.js` membaca data dari cache dan menampilkannya dalam tabel. Token baru diberi label 'NEW'."
        sumber_data: "Data dari `SYNC_KOIN_{CHAIN}` (IndexedDB)."
      - langkah: "Proses Import"
        detail: "Pengguna memilih token dan menekan 'Import Selected'. Modal konfigurasi (pilih pair, DEX, modal) muncul. Setelah konfirmasi, `coin.repository.js` dipanggil untuk menyimpan token-token baru ini ke `KOIN_{CHAIN}`."
        sumber_data: "Token yang dipilih dari cache sync dan konfigurasi dari modal import."
    perhitungan:
      - nama: "Perbandingan Duplikat"
        lokasi: "`sync-tab.js`"
        rumus: "Membandingkan kombinasi `cex_name` dan `sc_token` dari hasil sync dengan data yang sudah ada di `KOIN_{CHAIN}` untuk menentukan apakah sebuah token `isNew`."
    output_dan_data:
      - jenis: "Data Cache (IndexedDB)"
        detail: "Hasil sync disimpan di `SYNC_KOIN_{CHAIN}`."
      - jenis: "Data Manajemen (IndexedDB)"
        detail: "Saat import, record baru ditambahkan ke `KOIN_{CHAIN}`."
      - jenis: "Tampilan UI"
        detail: "Tabel di `sync-tab.js` terisi dengan daftar token dari CEX. Setelah import, token tersebut muncul di `management-tab.js`."
    tampilan_di_aplikasi:
      - komponen: "`sync-tab.js`"
        deskripsi: "Komponen utama yang menampilkan antarmuka untuk memilih CEX, tombol sync, tabel hasil, dan fungsionalitas untuk mengimpor token terpilih."

  - fitur: "4. Wallet Checker"
    deskripsi: "Utilitas untuk memeriksa status deposit/withdraw token di CEX dengan membandingkan data API CEX dan data on-chain."
    alur_proses:
      - langkah: "Input Pengguna"
        detail: "Pengguna memilih satu atau lebih CEX dari daftar di `wallet-tab.js` dan menekan tombol 'Cek Data Koin'."
        sumber_data: "Interaksi UI."
      - langkah: "Inisiasi Pengecekan"
        detail: "Method `handleCheckWallets()` dipanggil. Sebuah overlay loading muncul."
        sumber_data: "State lokal komponen."
      - langkah: "Fetch Data API CEX"
        detail: "Untuk setiap CEX yang dipilih, service `CheckWalletExchanger` dipanggil untuk mengambil daftar lengkap koin beserta status jaringan (deposit/withdraw) dari API CEX."
        sumber_data: "API CEX."
      - langkah: "Cross-Reference dengan DB Lokal"
        detail: "Aplikasi memuat semua koin yang relevan dari store `KOIN_{CHAIN}` (IndexedDB) yang cocok dengan CEX yang sedang dicek."
        sumber_data: "`KOIN_{CHAIN}` dari IndexedDB."
      - langkah: "Pencocokan dan Update"
        detail: "Aplikasi melakukan loop pada koin dari DB lokal. Untuk setiap koin, ia mencari data yang sesuai dari hasil fetch API CEX berdasarkan simbol token. Status `cex_deposit_status` dan `cex_withdraw_status` pada record koin di DB diperbarui."
        sumber_data: "Data dari API CEX dan data dari DB lokal."
      - langkah: "Penyimpanan Hasil"
        detail: "Setiap record koin yang telah diperbarui statusnya disimpan kembali ke `KOIN_{CHAIN}` di IndexedDB."
        sumber_data: "Objek koin yang sudah diupdate."
      - langkah: "Tampilan Hasil"
        detail: "Hasil pengecekan (jumlah koin dari API, jumlah yang diupdate, daftar koin bermasalah) ditampilkan dalam kartu per CEX di `wallet-tab.js`."
        sumber_data: "Hasil agregat dari proses pengecekan."
    perhitungan:
      - nama: "Pencocokan Data"
        lokasi: "`wallet-tab.js`"
        rumus: "Mencocokkan `nama_token` dari record di `KOIN_{CHAIN}` dengan `nama_token` atau `symbol` dari data yang diterima dari API CEX untuk menemukan status deposit/withdraw yang benar."
    output_dan_data:
      - jenis: "Data Manajemen (IndexedDB)"
        detail: "Field `cex_deposit_status` dan `cex_withdraw_status` pada record di `KOIN_{CHAIN}` diperbarui."
      - jenis: "Tampilan UI"
        detail: "Kartu-kartu hasil muncul di `wallet-tab.js`, menampilkan ringkasan statistik dan daftar koin yang status deposit/withdraw-nya non-aktif."
    tampilan_di_aplikasi:
      - komponen: "`wallet-tab.js`"
        deskripsi: "Menampilkan daftar CEX yang bisa dicek, tombol aksi, dan kartu hasil yang merinci status deposit/withdraw untuk setiap token yang relevan."

  - fitur: "5. Portfolio Tracker"
    deskripsi: "Dasbor terpusat untuk melacak total aset di semua CEX dan wallet on-chain, serta menghitung PNL terhadap modal awal."
    alur_proses:
      - langkah: "Input Pengguna"
        detail: "Pengguna membuka menu 'Portfolio' dan menekan tombol 'Refresh Exchange' atau 'Refresh Wallet'."
        sumber_data: "Interaksi UI."
      - langkah: "Fetch Saldo CEX"
        detail: "Saat 'Refresh Exchange', `checkSelectedExchanges()` memanggil `checkWalletExchanger.fetchAccountBalance()` untuk setiap CEX yang aktif. Ini mengambil total nilai aset dari API CEX."
        sumber_data: "API CEX (membutuhkan API Key pengguna)."
      - langkah: "Fetch Saldo Wallet On-Chain"
        detail: "Saat 'Refresh Wallet', `checkWalletBalances()` memanggil `web3Service.getBalances()` untuk setiap wallet yang aktif. Ini mengambil saldo token native (ETH, BNB) dan token utama (USDT, USDC) dari blockchain."
        sumber_data: "RPC Provider (via Web3.js)."
      - langkah: "Penyimpanan Snapshot"
        detail: "Hasil dari CEX disimpan ke `ASET_EXCHANGER` dan hasil dari wallet disimpan ke `ASET_WALLET` di IndexedDB."
        sumber_data: "Hasil fetch dari API dan RPC."
      - langkah: "Kalkulasi & Tampilan"
        detail: "Komponen `portfolio.js` membaca data dari store `ASET_*`, menjumlahkannya, membandingkan dengan modal awal dari `PORTFOLIO_SETTINGS`, lalu menampilkan total aset dan PNL."
        sumber_data: "Data dari `ASET_EXCHANGER`, `ASET_WALLET`, dan `PORTFOLIO_SETTINGS` (IndexedDB)."
    perhitungan:
      - nama: "Kalkulasi PNL Portfolio"
        lokasi: "`portfolio.js`"
        rumus: "PNL = (Total Aset CEX + Total Aset Wallet) - Modal Awal."
    output_dan_data:
      - jenis: "Data Snapshot (IndexedDB)"
        detail: "Data saldo disimpan di `ASET_EXCHANGER` dan `ASET_WALLET`. Pengaturan disimpan di `PORTFOLIO_SETTINGS` dan `PORTFOLIO_CREDENTIALS`. Riwayat PNL disimpan di `PORTFOLIO_PNL_HISTORY`."
      - jenis: "Tampilan UI"
        detail: "Menampilkan ringkasan total aset, PNL, dan rincian aset per CEX dan per wallet dalam bentuk tabel dan grafik."
    tampilan_di_aplikasi:
      - komponen: "`portfolio.js`"
        deskripsi: "Komponen tunggal yang mengelola seluruh menu Portfolio, termasuk tab untuk aset CEX, aset Wallet, dan PNL."

  - fitur: "6. Settings Management"
    deskripsi: "Mengelola semua konfigurasi aplikasi, baik global (nickname, modal) maupun spesifik per CEX/DEX (status aktif, jeda)."
    alur_proses:
      - langkah: "Input Pengguna"
        detail: "Pengguna membuka menu 'Settings' dan mengubah nilai pada form, misalnya mengaktifkan CEX atau mengubah nilai jeda."
        sumber_data: "Interaksi UI."
      - langkah: "Penyimpanan Pengaturan"
        detail: "Saat menekan 'Simpan Pengaturan', method `handleSaveSettings()` di `settings.js` memanggil `saveGlobalSettings()` di `app.js`."
        sumber_data: "Data dari form settings."
      - langkah: "Interaksi Repository"
        detail: "`saveGlobalSettings()` memanggil `settingsRepo.saveGlobal(data)`, di mana `settings.repository.js` akan menyimpan seluruh objek pengaturan ke dalam satu record di store `SETTING_GLOBAL`."
        sumber_data: "Objek pengaturan yang sudah dikumpulkan."
    perhitungan:
      - nama: "Tidak ada"
        lokasi: "-"
        rumus: "Hanya menyimpan dan memuat data konfigurasi."
    output_dan_data:
      - jenis: "Data Konfigurasi (IndexedDB)"
        detail: "Satu record di store `SETTING_GLOBAL` diperbarui. Pengaturan filter per chain disimpan di `SETTING_FILTER_{CHAIN}`."
      - jenis: "Tampilan UI"
        detail: "Notifikasi toast 'Pengaturan berhasil disimpan' muncul. Perilaku aplikasi akan berubah sesuai pengaturan baru."
    tampilan_di_aplikasi:
      - komponen: "`settings.js`"
        deskripsi: "Komponen yang menampilkan form untuk semua pengaturan aplikasi, termasuk pengaturan global, dan konfigurasi CEX/DEX."

  - fitur: "7. History Logging"
    deskripsi: "Mencatat semua aktivitas penting yang dilakukan pengguna secara otomatis di latar belakang."
    alur_proses:
      - langkah: "Pemicu Aksi"
        detail: "Fitur lain melakukan sebuah aksi, contoh: pengguna menghapus token di `management-tab.js`."
        sumber_data: "Aksi dari fitur lain."
      - langkah: "Pemanggilan Logger"
        detail: "Setelah aksi berhasil, method `logManagement()` (atau `logSync()`, dll) dari `history-logger.js` (mixin) dipanggil."
        sumber_data: "Informasi tentang aksi yang baru saja selesai."
      - langkah: "Penyusunan & Penyimpanan Log"
        detail: "Mixin menyusun objek log (timestamp, action, status, message) dan memanggil `DB.saveData('RIWAYAT_AKSI', logEntry)` untuk menyimpannya ke IndexedDB."
        sumber_data: "Data log yang baru dibuat."
    perhitungan:
      - nama: "Tidak ada"
        lokasi: "-"
        rumus: "Hanya menyusun dan menyimpan data log."
    output_dan_data:
      - jenis: "Data Log (IndexedDB)"
        detail: "Sebuah record baru ditambahkan ke store `RIWAYAT_AKSI`."
      - jenis: "Tampilan UI"
        detail: "Pengguna dapat melihat semua log yang tersimpan dengan membuka menu 'History'."
    tampilan_di_aplikasi:
      - komponen: "`history.js`"
        deskripsi: "Komponen yang membaca semua data dari store `RIWAYAT_AKSI` dan menampilkannya dalam bentuk tabel yang bisa difilter."

  - fitur: "8. Database Management"
    deskripsi: "Utilitas untuk mengelola data IndexedDB secara langsung, seperti backup, restore, dan menghapus data."
    alur_proses:
      - langkah: "Input Pengguna"
        detail: "Pengguna membuka menu 'Database' dan menekan tombol 'Backup', 'Restore', atau 'Kosongkan Database'."
        sumber_data: "Interaksi UI."
      - langkah: "Eksekusi Aksi (Backup)"
        detail: "Method `backupDB()` di `database.js` (mixin) memanggil `DB.backupDatabase()` dari `db.js`. Modul `db.js` membaca semua data dari semua store, menyusunnya menjadi satu file JSON, dan memicu download."
        sumber_data: "Seluruh data dari IndexedDB."
      - langkah: "Eksekusi Aksi (Restore)"
        detail: "Pengguna memilih file JSON. Method `restoreDB()` memanggil `DB.restoreDatabase()`. Modul `db.js` mengosongkan semua store dan mengisinya kembali dengan data dari file."
        sumber_data: "File JSON dari pengguna."
    perhitungan:
      - nama: "Tidak ada"
        lokasi: "-"
        rumus: "Operasi I/O (Input/Output) pada file dan database."
    output_dan_data:
      - jenis: "File (Output)"
        detail: "Saat backup, sebuah file `*.json` ter-download ke komputer pengguna."
      - jenis: "Data Persisten (IndexedDB)"
        detail: "Saat restore atau clear, data di IndexedDB akan berubah secara drastis."
      - jenis: "Tampilan UI"
        detail: "Halaman akan di-reload setelah proses restore atau clear selesai."
    tampilan_di_aplikasi:
      - komponen: "`database.js`"
        deskripsi: "Menampilkan statistik penggunaan database (jumlah record, ukuran) dan menyediakan tombol-tombol untuk aksi manajemen database."
